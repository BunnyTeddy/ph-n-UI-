import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../providers/auth_provider.dart';
import '../../../core/routes/app_routes.dart';
import '../widgets/custom_text_field.dart';
import '../widgets/password_text_field.dart';
import '../widgets/auth_button.dart';
import '../widgets/auth_header.dart';

/// Register Screen - Assigned to: Ho√†ng Ch√≠ B·∫±ng
/// Task 1.1: ƒêƒÉng k√Ω, ƒêƒÉng nh·∫≠p
class RegisterScreen extends StatefulWidget {
  const RegisterScreen({super.key});

  @override
  State<RegisterScreen> createState() => _RegisterScreenState();
}

class _RegisterScreenState extends State<RegisterScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();

  @override
  void dispose() {
    _nameController.dispose();
    _emailController.dispose();
    _passwordController.dispose();
    _confirmPasswordController.dispose();
    super.dispose();
  }

  Future<void> _handleRegister() async {
    if (_formKey.currentState!.validate()) {
      final authProvider = context.read<AuthProvider>();
      final success = await authProvider.signUp(
        _emailController.text.trim(),
        _passwordController.text,
        _nameController.text.trim(),
      );

      if (success && mounted) {
        Navigator.pushReplacementNamed(context, AppRoutes.home);
      } else if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('ƒêƒÉng k√Ω th·∫•t b·∫°i. Email c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.black87),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(24.0),
          child: Form(
            key: _formKey,
            child: Column(
              children: [
                // Header
                const AuthHeader(
                  title: 'T·∫°o t√†i kho·∫£n m·ªõi',
                  subtitle: 'B·∫Øt ƒë·∫ßu h√†nh tr√¨nh chƒÉm s√≥c c√¢y c·∫£nh',
                  emoji: 'üåø',
                ),
                const SizedBox(height: 40),
                
                // Name field
                CustomTextField(
                  controller: _nameController,
                  label: 'H·ªç v√† t√™n',
                  hintText: 'Nguy·ªÖn VƒÉn A',
                  prefixIcon: Icons.person_outline,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Vui l√≤ng nh·∫≠p h·ªç t√™n';
                    }
                    if (value.length < 2) {
                      return 'H·ªç t√™n qu√° ng·∫Øn';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                
                // Email field
                CustomTextField(
                  controller: _emailController,
                  label: 'Email',
                  hintText: 'example@email.com',
                  prefixIcon: Icons.email_outlined,
                  keyboardType: TextInputType.emailAddress,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Vui l√≤ng nh·∫≠p email';
                    }
                    if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {
                      return 'Email kh√¥ng h·ª£p l·ªá';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                
                // Password field
                PasswordTextField(
                  controller: _passwordController,
                  label: 'M·∫≠t kh·∫©u',
                  hintText: 'T·ªëi thi·ªÉu 6 k√Ω t·ª±',
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u';
                    }
                    if (value.length < 6) {
                      return 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                
                // Confirm password field
                PasswordTextField(
                  controller: _confirmPasswordController,
                  label: 'X√°c nh·∫≠n m·∫≠t kh·∫©u',
                  hintText: 'Nh·∫≠p l·∫°i m·∫≠t kh·∫©u',
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u';
                    }
                    if (value != _passwordController.text) {
                      return 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 8),
                
                // Terms and conditions
                Padding(
                  padding: const EdgeInsets.symmetric(vertical: 8),
                  child: Text(
                    'B·∫±ng c√°ch ƒëƒÉng k√Ω, b·∫°n ƒë·ªìng √Ω v·ªõi ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng v√† Ch√≠nh s√°ch b·∫£o m·∫≠t c·ªßa ch√∫ng t√¥i',
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.grey[600],
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
                const SizedBox(height: 24),
                
                // Register button
                Consumer<AuthProvider>(
                  builder: (context, authProvider, _) {
                    return AuthButton(
                      text: 'ƒêƒÉng k√Ω',
                      onPressed: _handleRegister,
                      isLoading: authProvider.isLoading,
                    );
                  },
                ),
                const SizedBox(height: 24),
                
                // Divider
                Row(
                  children: [
                    Expanded(child: Divider(color: Colors.grey[300])),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: Text(
                        'ho·∫∑c',
                        style: TextStyle(color: Colors.grey[600]),
                      ),
                    ),
                    Expanded(child: Divider(color: Colors.grey[300])),
                  ],
                ),
                const SizedBox(height: 24),
                
                // Login link
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                      'ƒê√£ c√≥ t√†i kho·∫£n? ',
                      style: TextStyle(color: Colors.grey[600]),
                    ),
                    GestureDetector(
                      onTap: () {
                        Navigator.pop(context);
                      },
                      child: Text(
                        'ƒêƒÉng nh·∫≠p',
                        style: TextStyle(
                          color: Theme.of(context).primaryColor,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}







